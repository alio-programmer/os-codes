#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024  // Define the size of the shared memory segment

int main() {
    key_t key = ftok("shmfile", 65);  // Generate a unique key
    int shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT);  // Create a shared memory segment

    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    char *shmaddr = (char*)shmat(shmid, (void*)0, 0);  // Attach the shared memory

    if (shmaddr == (char *)(-1)) {
        perror("shmat");
        exit(1);
    }

    // Write a message to the shared memory
    char message[] = "Hello from the server!";
    strncpy(shmaddr, message, SHM_SIZE);

    printf("Server: Message written to shared memory: %s\n", message);

    shmdt(shmaddr);  // Detach the shared memory segment

    return 0;
}






b--------------------------------------->


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024  // Define the size of the shared memory segment

int main() {
    key_t key = ftok("shmfile", 65);  // Use the same key as in the server
    int shmid = shmget(key, SHM_SIZE, 0666);  // Get the shared memory segment

    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    char *shmaddr = (char*)shmat(shmid, (void*)0, 0);  // Attach the shared memory

    if (shmaddr == (char *)(-1)) {
        perror("shmat");
        exit(1);
    }

    // Read the message from the shared memory and display it
    printf("Client: Message read from shared memory: %s\n", shmaddr);

    shmdt(shmaddr);  // Detach the shared memory segment

    // Optionally, you can remove the shared memory segment
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}
